import 'dart:io';
import 'package:flutter/material.dart';
import 'package:image_picker/image_picker.dart';

void main() {
  runApp(MaterialApp(
    debugShowCheckedModeBanner: false,
    home: dashboard(),
  ));
}

class dashboard extends StatefulWidget {
  const dashboard({super.key});

  @override
  State<dashboard> createState() => _nameState();
}

class _nameState extends State<dashboard> {

 // String selectedOption = 'Instock';

  final _scaffoldKey = GlobalKey<ScaffoldState>();
  TextEditingController name = TextEditingController();
  TextEditingController price = TextEditingController();
  TextEditingController quantity = TextEditingController();
  TextEditingController image = TextEditingController();
  TextEditingController mdate = TextEditingController();
  TextEditingController exdate = TextEditingController();
  TextEditingController purchasedate = TextEditingController();

  String? img;

  Future<void> _pickImage() async {
    final picker = ImagePicker();
    final XFile? pickedFile =
        await picker.pickImage(source: ImageSource.gallery);

    if (pickedFile != null) {
      setState(() {
        img = pickedFile.path;
        image.text = img!;
      });
    }
  }

  DateTime selectedDate = DateTime.now();

  Future<void> _selectDate(BuildContext context) async {
    final DateTime? picked = await showDatePicker(
        context: context,
        initialDate: selectedDate,
        firstDate: DateTime(2015, 8),
        lastDate: DateTime(2101)
        );
    if (picked != null && picked != selectedDate)
      setState(() {
        selectedDate = picked;
        mdate.text = selectedDate.toString(); // Update the TextField value
      });
  }

  DateTime selectedDateex = DateTime.now();

  Future<void> _selectDateex(BuildContext context) async {
    final DateTime? picked = await showDatePicker(
        context: context,
        initialDate: selectedDateex,
        firstDate: DateTime(2015, 8),
        lastDate: DateTime(2101));
    if (picked != null && picked != selectedDateex)
      setState(() {
        selectedDateex = picked;
        exdate.text = selectedDateex.toString(); // Update the TextField value
      });
  }

  DateTime selectedDatepur = DateTime.now();

  Future<void> _selectDatepur(BuildContext context) async {
    final DateTime? picked = await showDatePicker(
        context: context,
        initialDate: selectedDatepur,
        firstDate: DateTime(2015, 8),
        lastDate: DateTime(2101));
    if (picked != null && picked != selectedDatepur)
      setState(() {
        selectedDatepur = picked;
        purchasedate.text =
            selectedDatepur.toString(); // Update the TextField value
      });
  }

  @override
  Widget build(BuildContext context) {

    return Scaffold(
      appBar: AppBar(
        key: _scaffoldKey,
        title: Center(child: Text("Inventory")),
      ),
      drawer: Drawer(
        child: ListView(
          padding: EdgeInsets.zero,
          children: <Widget>[
            DrawerHeader(
              decoration: BoxDecoration(
                color: Colors.blue,
              ),
              child: Text(
                'Drawer Header',
                style: TextStyle(
                  color: Colors.white,
                  fontSize: 24,
                ),
              ),
            ),
            ListTile(
              leading: Icon(Icons.square),
              title: Text('Instock'),
              onTap: () {
                setState(() {
                  selectedOption = 'Instock';
                });
                _scaffoldKey.currentState!.openDrawer();
                // Update the UI based on the option selected
                // Example: Navigator.push(context, MaterialPageRoute(builder: (context) => HomeScreen()));
              },
            ),
            ListTile(
              leading: Icon(Icons.square),
              title: Text('Outstock'),
              onTap: () {
                setState(() {
                  selectedOption = 'Outstock';
                });
                _scaffoldKey.currentState!.openDrawer();

                // Update the UI based on the option selected
                // Example: Navigator.push(context, MaterialPageRoute(builder: (context) => SettingsScreen()));
              },
            ),
            ListTile(
              leading: Icon(Icons.square),
              title: Text('Settings'),
              onTap: () {
                setState(() {
                  selectedOption = 'Outstock';
                });
                _scaffoldKey.currentState!.openDrawer();

                // Update the UI based on the option selected
                // Example: Navigator.push(context, MaterialPageRoute(builder: (context) => SettingsScreen()));
              },
            ),
            ListTile(
              leading: Icon(Icons.square),
              title: Text('Settings'),
              onTap: () {
                setState(() {
                  selectedOption = 'Outstock';
                });
                _scaffoldKey.currentState!.openDrawer();
                // Update the UI based on the option selected
                // Example: Navigator.push(context, MaterialPageRoute(builder: (context) => SettingsScreen()));
              },
            ),
            ListTile(
              leading: Icon(Icons.square),
              title: Text('Settings'),
              onTap: () {
                setState(() {
                  selectedOption = 'Outstock';
                });
                _scaffoldKey.currentState!.openDrawer();

                // Update the UI based on the option selected
                // Example: Navigator.push(context, MaterialPageRoute(builder: (context) => SettingsScreen()));
              },
            ),
            ListTile(
              leading: Icon(Icons.square),
              title: Text('Settings'),
              onTap: () {
                setState(() {
                  selectedOption = 'Outstock';
                });
                _scaffoldKey.currentState!.openDrawer();

                // Update the UI based on the option selected
                // Example: Navigator.push(context, MaterialPageRoute(builder: (context) => SettingsScreen()));
              },
            ),
          ],
        ),
      ),
      body: Column(
        children: [
          Text(selectedOption, style: TextStyle(fontSize: 25)),
          Row(
            children: [
              Expanded(
                child: Container(
                  margin: EdgeInsets.only(left: 40, right: 40),
                  child: TextField(
                    controller: name,
                    decoration: InputDecoration(
                      border: OutlineInputBorder(
                          borderRadius: BorderRadius.circular(10)),
                      hintText: 'Name',
                    ),
                  ),
                ),
              ),
              SizedBox(width: 10), // Add some space between text fields
              Expanded(
                child: Container(
                  margin: EdgeInsets.only(left: 40, right: 40),
                  child: TextField(
                    controller: price,
                    decoration: InputDecoration(
                      border: OutlineInputBorder(
                          borderRadius: BorderRadius.circular(10)),
                      hintText: 'Price',
                    ),
                  ),
                ),
              ),
              Expanded(
                child: Container(
                  margin: EdgeInsets.only(left: 40, right: 40),
                  child: TextField(
                    controller: quantity,
                    decoration: InputDecoration(
                      border: OutlineInputBorder(
                          borderRadius: BorderRadius.circular(10)),
                      hintText: 'Quantity',
                    ),
                  ),
                ),
              ),
            ],
          ),
          SizedBox(height: 20),
          Row(
            children: [
              Expanded(
                child: Container(
                  margin: EdgeInsets.only(left: 40, right: 40),
                  child: Column(
                    children: [
                      TextField(
                        controller: image,
                        decoration: InputDecoration(
                          border: OutlineInputBorder(
                            borderRadius: BorderRadius.circular(10),
                          ),
                          hintText: 'Image',
                          suffixIcon: IconButton(
                            icon: Icon(Icons.image),
                            onPressed:
                                _pickImage, // call _pickImage directly here
                          ),
                        ),
                      ),
                      SizedBox(height: 5),
                      // Display the picked image if available
                      if (img != null) ...[
                        Container(
                            height: 50,
                            width: 50,
                            child: Image.file(File(img!))),
                      ],
                    ],
                  ),
                ),
              ),

              SizedBox(width: 10),

              Expanded(
                child: Container(
                  margin: EdgeInsets.only(left: 40, right: 40),
                  child: TextField(
                    controller: mdate,
                    readOnly: true, // Make TextField read-only
                    decoration: InputDecoration(
                      border: OutlineInputBorder(
                          borderRadius: BorderRadius.circular(10)),
                      hintText: 'manudate',
                      suffixIcon: IconButton(
                        icon: Icon(Icons.calendar_today),
                        onPressed: () {
                          _selectDate(context); // Call date picker function
                        },
                      ),
                    ),
                  ),
                ),
              ), // Add some space between text fields
              Expanded(
                child: Container(
                  margin: EdgeInsets.only(left: 40, right: 40),
                  child: TextField(
                    controller: exdate,
                    readOnly: true, // Make TextField read-only
                    decoration: InputDecoration(
                      border: OutlineInputBorder(
                          borderRadius: BorderRadius.circular(10)),
                      hintText: 'exdate',
                      suffixIcon: IconButton(
                        icon: Icon(Icons.calendar_today),
                        onPressed: () {
                          _selectDateex(context); // Call date picker function
                        },
                      ),
                    ),
                  ),
                ),
              ), // Add some spa
            ],
          ),
          SizedBox(height: 20),
          Row(
            children: [
              Container(
                width: 555,
                margin: EdgeInsets.only(left: 40, right: 40),
                child: TextField(
                  controller: purchasedate,
                  readOnly: true,
                  decoration: InputDecoration(
                    border: OutlineInputBorder(
                        borderRadius: BorderRadius.circular(10)),
                    hintText: 'purchasedate',
                    suffixIcon: IconButton(
                      icon: Icon(Icons.calendar_today),
                      onPressed: () {
                        _selectDatepur(context); // Call date picker function
                      },
                    ),
                  ),
                ),
              ),
            ],
          ),
          SizedBox(
            height: 50,
          ),
          ElevatedButton(onPressed: () {}, child: Text("Done"))
        ],
      ),
    );
  }
}
